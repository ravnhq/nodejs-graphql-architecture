// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @unique @default(uuid())
  firstName    String         @map("first_name")
  lastName     String         @map("last_name")
  email        String         @unique
  password     String
  type         TypeUser
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  orders       Order[]
  userProduct  UserProduct[]
  auths        Auth[]
  car          Car?
  likedProduct LikedProduct[]

  @@map("users")
}

model Product {
  id           String         @id @unique @default(uuid())
  name         String
  price        Float
  status       Boolean
  attachment   Attachment?
  detail       Detail[]
  userProduct  UserProduct[]
  carDetails   CarDetail[]
  likedProduct LikedProduct[]
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")

  @@map("products")
}

model UserProduct {
  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @map("user_id")


  @@id([productId, userId])
  @@map("user_products")
}

model Attachment {
  id          String   @id @unique @default(uuid())
  path        String
  key         String
  ext         String
  contentType String   @map(name: "content_type")
  productId   String   @unique
  product     Product  @relation(fields: [productId], references: [id])
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("attachments")
}

model Order {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  detail    Detail[]
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

model Detail {
  id        String   @id @unique @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  quantity  Int
  total     Float
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("details")
}

model Auth {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now()) @map(name: "created_at")
  userId       String   @map(name: "user_id")
  user         User     @relation(fields: [userId], references: [id])
  jti          String   @unique @default(uuid())
  aud          String?
  refreshToken String   @unique @default(uuid()) @map(name: "refresh_token")

  @@map(name: "auths")
}

model Car {
  id        String      @id @default(uuid())
  userId    String      @unique @map(name: "user_id")
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now()) @map(name: "created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  carDetail CarDetail[]

  @@map(name: "cars")
}

model CarDetail {
  carId     String  @map(name: "car_id")
  car       Car     @relation(fields: [carId], references: [id])
  productId String  @map(name: "product_id")
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int

  @@id([carId, productId])
  @@map(name: "car_details")
}

model LikedProduct {
  userId    String  @map(name: "user_id")
  user      User    @relation(fields: [userId], references: [id])
  productId String  @map(name: "product_id")
  product   Product @relation(fields: [productId], references: [id])
  liked     Boolean

  @@id([userId, productId])
  @@map(name: "liked_products")
}

enum TypeUser {
  MANAGER
  CLIENT
}
